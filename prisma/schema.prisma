// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
   ТВОИ УЖЕ СУЩЕСТВУЮЩИЕ МОДЕЛИ
   (без изменений)
   ========================= */

model UserProfile {
  id          String   @id @default(uuid())
  userId      String   @unique            // пока строковый, позже можно связать с User.id
  displayName String?
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChatSession {
  id        String    @id @default(uuid())
  userId    String                         // пока строковый, позже сделаем FK на User.id
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id          String      @id @default(uuid())
  sessionId   String
  role        String
  content     String
  audioUrl    String?
  createdAt   DateTime    @default(now())
  ChatSession ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

// === Billing ===
model Subscription {
  userId             String   @id           // пока строковый, позже свяжем с User.id
  stripeCustomer     String?  @unique
  stripeSubscription String?  @unique

  plan               Plan     @default(FREE)     // FREE | PLUS | PRO
  term               String?                      // '1M' | '3M' | '6M' | '12M' | 'LIFETIME'
  status             String?                      // 'active' | 'trialing' | 'incomplete' | 'canceled' ...

  currentPeriodEnd   DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Entitlement {
  userId             String   @id           // пока строковый, позже свяжем с User.id
  plus               Boolean  @default(false)
  pro                Boolean  @default(false)
  tts                Boolean  @default(false)
  maxFaceTimeMinutes Int      @default(0)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum Plan {
  FREE
  PLUS
  PRO
}

/* =========================
   ДОБАВЛЯЕМ МОДЕЛИ ДЛЯ NEXTAUTH
   (стандартные)
   ========================= */

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
